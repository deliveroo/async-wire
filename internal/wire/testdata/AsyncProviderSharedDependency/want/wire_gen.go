// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/deliveroo/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"example.com/bar"
	"example.com/baz"
	"golang.org/x/sync/errgroup"
)

// Injectors from wire.go:

func injectFoo(ctx context.Context) int {
	g, ctx := errgroup.WithContext(ctx)
	barBarChan := make(chan bar.Bar, 2)
	g.Go(func() error {
		barBar := bar.ProvideBar(ctx)
		for i := 1; i <= 2; i++ {
			select {
			case barBarChan <- barBar:
			case <-ctx.Done():
				return ctx.Err()
			}
		}
		return nil
	})
	bazBazChan := make(chan baz.Baz, 1)
	g.Go(func() error {
		var barBar bar.Bar
		select {
		case barBar = <-barBarChan:
		case <-ctx.Done():
			return ctx.Err()
		}
		bazBaz := baz.ProvideBaz(ctx, barBar)
		select {
		case bazBazChan <- bazBaz:
		case <-ctx.Done():
			return ctx.Err()
		}
		return nil
	})
	int2Chan := make(chan int, 1)
	g.Go(func() error {
		var barBar bar.Bar
		select {
		case barBar = <-barBarChan:
		case <-ctx.Done():
			return ctx.Err()
		}
		var bazBaz baz.Baz
		select {
		case bazBaz = <-bazBazChan:
		case <-ctx.Done():
			return ctx.Err()
		}
		int2 := provideFoo(barBar, bazBaz)
		select {
		case int2Chan <- int2:
		case <-ctx.Done():
			return ctx.Err()
		}
		return nil
	})
	if err := g.Wait(); err != nil {
		return 0
	}
	int2 := <-int2Chan
	return int2
}
